[src/config/index.js]
import dotenv from "dotenv"
dotenv.config()

export const config = {
  jira: {
    baseUrl: process.env.JIRA_BASE_URL,
    username: process.env.JIRA_USERNAME,
    password: process.env.JIRA_PASSWORD,
    projectKey: process.env.JIRA_KEY_PROJECT,
  },
  glpi: {
    baseUrl: process.env.GLPI_BASE_URL,
    userToken: process.env.GLPI_USER_TOKEN,
    appToken: process.env.GLPI_APP_TOKEN,
  },
  statusMapping: {
    jiraToGlpi: {
      "To Do": 1,
      "In Progress": 2,
      Done: 5,
    },
    glpiToJira: {
      1: "To Do",
      2: "In Progress",
      5: "Done",
    },
  },
  dryRun: false,
  // allowDeletion: process.env.ALLOW_DELETION === "true" || false,
  allowDeletion: true,
}

[src/glpi.js]
import axios from "axios"
import { config } from "./config/index.js"
import { log } from "./logger.js"

let sessionToken = null

export async function initGLPISession() {
  try {
    const response = await axios.get(`${config.glpi.baseUrl}/initSession`, {
      headers: {
        Authorization: `user_token ${config.glpi.userToken}`,
        "App-Token": config.glpi.appToken,
      },
    })
    sessionToken = response.data.session_token
    log("GLPI session started")
  } catch (error) {
    log(`GLPI session error: ${error.message}`, "error")
  }
}

export async function killGLPISession() {
  if (!sessionToken) return
  await axios.get(`${config.glpi.baseUrl}/killSession`, {
    headers: {
      "Session-Token": sessionToken,
      "App-Token": config.glpi.appToken,
    },
  })
  log("GLPI session ended")
  sessionToken = null
}

export async function getGLPITickets() {
  try {
    const response = await axios.get(`${config.glpi.baseUrl}/Ticket/`, {
      headers: {
        "Session-Token": sessionToken,
        "App-Token": config.glpi.appToken,
      },
    })
    return response.data
  } catch (error) {
    log(`GLPI get tickets error: ${error.message}`, "error")
    return []
  }
}
export async function createGLPITicket({ name, content, users_id_recipient }) {
  try {
    const response = await axios.post(
      `${config.glpi.baseUrl}/Ticket`,
      {
        input: {
          name,
          content,
          users_id_recipient,
        },
      },
      {
        headers: {
          "Session-Token": sessionToken,
          "App-Token": config.glpi.appToken,
        },
      }
    )

    return response.data
  } catch (error) {
    log(`GLPI create ticket error: ${error.message}`, "error")
    return null
  }
}

export async function deleteGLPITicket(ticketId) {
  if (!config.allowDeletion) {
    log(`⚠️ Deletion disabled - skipping deletion of GLPI ticket ${ticketId}`)
    return false
  }
  try {
    await axios.delete(`${config.glpi.baseUrl}/Ticket/${ticketId}`, {
      headers: {
        "Session-Token": sessionToken,
        "App-Token": config.glpi.appToken,
      },
    })
    return true
  } catch (error) {
    log(`GLPI delete ticket error: ${error.message}`, "error")
    return false
  }
}

export async function updateGLPITicket(
  ticketId,
  { name, content, users_id_recipient }
) {
  try {
    const response = await axios.put(
      `${config.glpi.baseUrl}/Ticket/${ticketId}`,
      {
        input: {
          name,
          content,
          users_id_recipient,
        },
      },
      {
        headers: {
          "Session-Token": sessionToken,
          "App-Token": config.glpi.appToken,
        },
      }
    )
    return response.data
  } catch (error) {
    log(`GLPI update ticket error: ${error.message}`, "error")
    return null
  }
}

[src/index.js]
import { initGLPISession, killGLPISession } from "./glpi.js"
import { syncJiraToGLPI, syncGLPIToJira, syncDeletedItems } from "./sync.js"
import { log } from "./logger.js"

async function main() {
  const mode = process.argv[2] || "both"
  await initGLPISession()

  try {
    if (mode === "cleanup" || mode === "both") await syncDeletedItems()
    if (mode === "jira2glpi" || mode === "both") await syncJiraToGLPI()
    if (mode === "glpi2jira" || mode === "both") await syncGLPIToJira()
  } catch (error) {
    log(`Main error: ${error.message}`, "error")
  } finally {
    await killGLPISession()
  }
}

main()

[src/jira.js]
import axios from "axios"
import { config } from "./config/index.js"
import { log } from "./logger.js"

const auth = Buffer.from(
  `${config.jira.username}:${config.jira.password}`
).toString("base64")
const jiraHeaders = {
  Authorization: `Basic ${auth}`,
  Accept: "application/json",
}

export async function createJiraIssue({ summary, description }) {
  try {
    const response = await axios.post(
      `${config.jira.baseUrl}/rest/api/2/issue`,
      {
        fields: {
          project: {
            key: config.jira.projectKey,
          },
          summary,
          description,
          issuetype: {
            name: "Task", // или "Bug", "Story" — зависит от конфигурации проекта
          },
        },
      },
      {
        headers: {
          ...jiraHeaders,
          "Content-Type": "application/json",
        },
      }
    )
    log(`Создана Jira задача: ${response.data.key}`)
    return response.data
  } catch (error) {
    log(`Jira create issue error: ${error.message}`, "error")
    return null
  }
}

export async function getJiraIssues() {
  try {
    const response = await axios.get(
      `${config.jira.baseUrl}/rest/api/2/search`,
      {
        headers: jiraHeaders,
        params: {
          jql: `project=${config.jira.projectKey}`,
          maxResults: 100,
          fields: "summary,description,updated,reporter",
        },
      }
    )
    return response.data.issues || []
  } catch (error) {
    log(
      `Jira get issues error: ${error.response?.status} – ${
        JSON.stringify(error.response?.data) || error.message
      }`,
      "error"
    )
    return []
  }
}

export async function deleteJiraIssue(issueIdOrKey) {
  if (!config.allowDeletion) {
    log(
      `⚠️ Deletion disabled - skipping deletion of Jira issue ${issueIdOrKey}`
    )
    return false
  }
  try {
    await axios.delete(
      `${config.jira.baseUrl}/rest/api/2/issue/${issueIdOrKey}`,
      {
        headers: jiraHeaders,
      }
    )
    return true
  } catch (error) {
    log(`Jira delete issue error: ${error.message}`, "error")
    return false
  }
}

export async function updateJiraIssue(issueIdOrKey, fields) {
  try {
    await axios.put(
      `${config.jira.baseUrl}/rest/api/2/issue/${issueIdOrKey}`,
      { fields },
      { headers: jiraHeaders }
    )
    return true
  } catch (error) {
    log(`Jira update issue error: ${error.message}`, "error")
    return false
  }
}

[src/logger.js]
export function log(message, level = "info") {
  const timestamp = new Date().toISOString()
  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}]: ${message}`
  console.log(formattedMessage)
}

[src/scripts/generateMapping.js]
import axios from "axios"
import fs from "fs"
import dotenv from "dotenv"
dotenv.config()

const { GLPI_API_URL, GLPI_APP_TOKEN, GLPI_USER_TOKEN } = process.env

const mappingFilePath = "./src/utils/mapping.js"

async function getSessionToken() {
  const response = await axios.get(`${GLPI_API_URL}/initSession`, {
    headers: {
      "App-Token": GLPI_APP_TOKEN,
      Authorization: `user_token ${GLPI_USER_TOKEN}`,
    },
  })
  return response.data.session_token
}

async function getUsers(sessionToken) {
  const response = await axios.get(`${GLPI_API_URL}/User`, {
    headers: {
      "Session-Token": sessionToken,
      "App-Token": GLPI_APP_TOKEN,
    },
    params: {
      range: "0-999",
    },
  })

  return response.data
}

function buildUserMap(users) {
  const map = {}
  users.forEach((user) => {
    if (user.name) {
      map[user.name] = user.id
    }
  })
  return map
}

function saveMappingToFile(map) {
  const entries = Object.entries(map)
    .map(([name, id]) => `  "${name}": ${id},`)
    .join("\n")

  const content = `export const userMap = {\n${entries}\n};\n`

  fs.writeFileSync(mappingFilePath, content, "utf8")
  console.log(`mapping.js updated with ${Object.keys(map).length} users.`)
}

async function main() {
  try {
    const token = await getSessionToken()
    const users = await getUsers(token)
    const userMap = buildUserMap(users)
    saveMappingToFile(userMap)
  } catch (err) {
    console.error("Error:", err.message)
  }
}

main()

[src/sync.js]
import {
  getJiraIssues,
  createJiraIssue,
  deleteJiraIssue,
  updateJiraIssue,
} from "./jira.js"
import {
  getGLPITickets,
  createGLPITicket,
  deleteGLPITicket,
  updateGLPITicket,
} from "./glpi.js"
import { config } from "./config/index.js"
import { userMap } from "./utils/mapping.js"
import { log } from "./logger.js"

function normalizeName(name = "") {
  return name.trim().toLowerCase()
}

// Создание и обновление GLPI из Jira
export async function syncJiraToGLPI() {
  const jiraIssues = await getJiraIssues()
  const glpiTickets = await getGLPITickets()

  const glpiByName = {}
  glpiTickets.forEach((ticket) => {
    glpiByName[normalizeName(ticket.name)] = ticket
  })

  for (const issue of jiraIssues) {
    const name = issue.fields.summary
    const content = issue.fields.description || ""
    const reporter = issue.fields.reporter?.displayName || "glpi"
    const normalizedName = normalizeName(name)

    const matchingTicket = glpiByName[normalizedName]

    if (matchingTicket) {
      // Обновить, если нужно
      if (
        matchingTicket.content !== content ||
        matchingTicket.users_id_recipient !== userMap[reporter]
      ) {
        await updateGLPITicket(matchingTicket.id, {
          name,
          content,
          users_id_recipient: userMap[reporter] || userMap["glpi"],
        })
        log(`✅ Обновлён GLPI тикет: ${name}`)
      }
    } else {
      // Создать
      await createGLPITicket({
        name,
        content,
        users_id_recipient: userMap[reporter] || userMap["glpi"],
      })
      log(`➕ Создан GLPI тикет из Jira: ${name}`)
    }
  }
}

// Создание и обновление Jira из GLPI
export async function syncGLPIToJira() {
  const jiraIssues = await getJiraIssues()
  const glpiTickets = await getGLPITickets()

  const jiraByName = {}
  jiraIssues.forEach((issue) => {
    jiraByName[normalizeName(issue.fields.summary)] = issue
  })

  for (const ticket of glpiTickets) {
    const name = ticket.name
    const content = ticket.content || ""
    const normalizedName = normalizeName(name)

    const matchingIssue = jiraByName[normalizedName]

    if (matchingIssue) {
      // Обновить
      if (matchingIssue.fields.description !== content) {
        await updateJiraIssue(matchingIssue.id, {
          description: content,
        })
        log(`✅ Обновлена Jira задача: ${name}`)
      }
    } else {
      // Создать
      await createJiraIssue({
        summary: name,
        description: content,
      })
      log(`➕ Создана Jira задача из GLPI: ${name}`)
    }
  }
}

// Удаление задач
export async function syncDeletedItems() {
  const jiraIssues = await getJiraIssues()
  const glpiTickets = await getGLPITickets()

  const jiraNames = new Set(
    jiraIssues.map((i) => normalizeName(i.fields.summary))
  )
  const glpiNames = new Set(glpiTickets.map((t) => normalizeName(t.name)))

  // Удаление Jira задач, которых нет в GLPI
  for (const issue of jiraIssues) {
    const name = normalizeName(issue.fields.summary)
    if (!glpiNames.has(name)) {
      const success = await deleteJiraIssue(issue.id)
      if (success) log(`🗑️ Удалена Jira задача: ${issue.fields.summary}`)
    }
  }

  // Удаление GLPI тикетов, которых нет в Jira
  for (const ticket of glpiTickets) {
    const name = normalizeName(ticket.name)
    if (!jiraNames.has(name)) {
      const success = await deleteGLPITicket(ticket.id)
      if (success) log(`🗑️ Удалён GLPI тикет: ${ticket.name}`)
    }
  }
}

[src/utils/mapping.js]
export const userMap = {
  "glpi": 2,
  "post-only": 3,
  "tech": 4,
  "normal": 5,
  "glpi-system": 6,
};

