[src/config/index.js]
import dotenv from "dotenv"
dotenv.config()

export const config = {
  jira: {
    baseUrl: process.env.JIRA_BASE_URL,
    username: process.env.JIRA_USERNAME,
    password: process.env.JIRA_PASSWORD,
    projectKey: process.env.JIRA_KEY_PROJECT,
  },
  glpi: {
    baseUrl: process.env.GLPI_BASE_URL,
    userToken: process.env.GLPI_USER_TOKEN,
    appToken: process.env.GLPI_APP_TOKEN,
  },
  statusMapping: {
    jiraToGlpi: {
      "To Do": 1,
      "In Progress": 2,
      Done: 5,
    },
    glpiToJira: {
      1: "To Do",
      2: "In Progress",
      5: "Done",
    },
  },
  dryRun: false,
  allowDeletion: process.env.ALLOW_DELETION === "true" || false,
}

[src/glpi.js]
import axios from "axios"
import { config } from "./config/index.js"
import { log } from "./logger.js"

let sessionToken = null

export async function initGLPISession() {
  try {
    const response = await axios.get(`${config.glpi.baseUrl}/initSession`, {
      headers: {
        Authorization: `user_token ${config.glpi.userToken}`,
        "App-Token": config.glpi.appToken,
      },
    })
    sessionToken = response.data.session_token
    log("GLPI session started")
  } catch (error) {
    log(`GLPI session error: ${error.message}`, "error")
  }
}

export async function killGLPISession() {
  if (!sessionToken) return
  await axios.get(`${config.glpi.baseUrl}/killSession`, {
    headers: {
      "Session-Token": sessionToken,
      "App-Token": config.glpi.appToken,
    },
  })
  log("GLPI session ended")
  sessionToken = null
}

export async function getGLPITickets() {
  try {
    const response = await axios.get(`${config.glpi.baseUrl}/Ticket/`, {
      headers: {
        "Session-Token": sessionToken,
        "App-Token": config.glpi.appToken,
      },
    })
    return response.data
  } catch (error) {
    log(`GLPI get tickets error: ${error.message}`, "error")
    return []
  }
}
export async function createGLPITicket({ name, content, users_id_recipient }) {
  try {
    const response = await axios.post(
      `${config.glpi.baseUrl}/Ticket`,
      {
        input: {
          name,
          content,
          users_id_recipient,
        },
      },
      {
        headers: {
          "Session-Token": sessionToken,
          "App-Token": config.glpi.appToken,
        },
      }
    )

    return response.data
  } catch (error) {
    log(`GLPI create ticket error: ${error.message}`, "error")
    return null
  }
}

export async function deleteGLPITicket(ticketId) {
  if (!config.allowDeletion) {
    log(`‚ö†Ô∏è Deletion disabled - skipping deletion of GLPI ticket ${ticketId}`)
    return false
  }
  try {
    await axios.delete(`${config.glpi.baseUrl}/Ticket/${ticketId}`, {
      headers: {
        "Session-Token": sessionToken,
        "App-Token": config.glpi.appToken,
      },
    })
    return true
  } catch (error) {
    log(`GLPI delete ticket error: ${error.message}`, "error")
    return false
  }
}

[src/index.js]
import { initGLPISession, killGLPISession } from "./glpi.js"
import { syncJiraToGLPI, syncGLPIToJira, syncDeletedItems } from "./sync.js"
import { log } from "./logger.js"

async function main() {
  const mode = process.argv[2] || "both"
  await initGLPISession()

  try {
    if (mode === "cleanup" || mode === "both") await syncDeletedItems()
    if (mode === "jira2glpi" || mode === "both") await syncJiraToGLPI()
    if (mode === "glpi2jira" || mode === "both") await syncGLPIToJira()
  } catch (error) {
    log(`Main error: ${error.message}`, "error")
  } finally {
    await killGLPISession()
  }
}

main()

[src/jira.js]
import axios from "axios"
import { config } from "./config/index.js"
import { log } from "./logger.js"

const auth = Buffer.from(
  `${config.jira.username}:${config.jira.password}`
).toString("base64")
const jiraHeaders = {
  Authorization: `Basic ${auth}`,
  Accept: "application/json",
}

export async function getJiraIssues() {
  try {
    const response = await axios.get(
      `${config.jira.baseUrl}/rest/api/2/search`,
      {
        headers: jiraHeaders,
        params: {
          jql: `project=${config.jira.projectKey}`,
          maxResults: 100,
          fields: "summary,description",
        },
      }
    )
    return response.data.issues || []
  } catch (error) {
    log(
      `Jira get issues error: ${error.response?.status} ‚Äì ${
        JSON.stringify(error.response?.data) || error.message
      }`,
      "error"
    )
    return []
  }
}

export async function deleteJiraIssue(issueIdOrKey) {
  if (!config.allowDeletion) {
    log(
      `‚ö†Ô∏è Deletion disabled - skipping deletion of Jira issue ${issueIdOrKey}`
    )
    return false
  }
  try {
    await axios.delete(
      `${config.jira.baseUrl}/rest/api/2/issue/${issueIdOrKey}`,
      {
        headers: jiraHeaders,
      }
    )
    return true
  } catch (error) {
    log(`Jira delete issue error: ${error.message}`, "error")
    return false
  }
}

[src/logger.js]
export function log(message, level = "info") {
  const timestamp = new Date().toISOString()
  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}]: ${message}`
  console.log(formattedMessage)
}

[src/scripts/generateMapping.js]
import axios from "axios"
import fs from "fs"
import dotenv from "dotenv"
dotenv.config()

const { GLPI_API_URL, GLPI_APP_TOKEN, GLPI_USER_TOKEN } = process.env

const mappingFilePath = "./src/utils/mapping.js"

async function getSessionToken() {
  const response = await axios.get(`${GLPI_API_URL}/initSession`, {
    headers: {
      "App-Token": GLPI_APP_TOKEN,
      Authorization: `user_token ${GLPI_USER_TOKEN}`,
    },
  })
  return response.data.session_token
}

async function getUsers(sessionToken) {
  const response = await axios.get(`${GLPI_API_URL}/User`, {
    headers: {
      "Session-Token": sessionToken,
      "App-Token": GLPI_APP_TOKEN,
    },
    params: {
      range: "0-999",
    },
  })

  return response.data
}

function buildUserMap(users) {
  const map = {}
  users.forEach((user) => {
    if (user.name) {
      map[user.name] = user.id
    }
  })
  return map
}

function saveMappingToFile(map) {
  const entries = Object.entries(map)
    .map(([name, id]) => `  "${name}": ${id},`)
    .join("\n")

  const content = `export const userMap = {\n${entries}\n};\n`

  fs.writeFileSync(mappingFilePath, content, "utf8")
  console.log(`mapping.js updated with ${Object.keys(map).length} users.`)
}

async function main() {
  try {
    const token = await getSessionToken()
    const users = await getUsers(token)
    const userMap = buildUserMap(users)
    saveMappingToFile(userMap)
  } catch (err) {
    console.error("Error:", err.message)
  }
}

main()

[src/sync.js]
import { getJiraIssues } from "./jira.js"
import { getGLPITickets, createGLPITicket, deleteGLPITicket } from "./glpi.js"
import { config } from "./config/index.js"
import { log } from "./logger.js"
import { userMap } from "./utils/mapping.js"
import axios from "axios"

const auth = Buffer.from(
  `${config.jira.username}:${config.jira.password}`
).toString("base64")
const jiraHeaders = {
  Authorization: `Basic ${auth}`,
  "Content-Type": "application/json",
  Accept: "application/json",
}

export async function syncJiraToGLPI() {
  const issues = await getJiraIssues()
  const existingTickets = await getGLPITickets()

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Jira-–∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ GLPI (–ø–æ name)
  const existingJiraKeys = new Set()
  for (const ticket of existingTickets) {
    const match = ticket.name.match(/^([A-Z]+-\d+):/)
    if (match) {
      existingJiraKeys.add(match[1])
    }
  }

  for (const issue of issues) {
    const issueKey = issue.key
    const summary = issue.fields.summary
    const description =
      issue.fields.description?.content?.[0]?.content?.[0]?.text ||
      "No description"

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ GLPI
    if (/GLPI-ID: \d+/.test(issue.fields.description)) {
      log(`üü° Jira issue ${issueKey} was created from GLPI, skipping`)
      continue
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–π Jira issue —É–∂–µ –µ—Å—Ç—å –≤ GLPI
    if (existingJiraKeys.has(issueKey)) {
      log(`üü° GLPI ticket already exists for Jira issue ${issueKey}, skipping`)
      continue
    }

    const userId = userMap["glpi"] // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await createGLPITicket({
      name: `${issueKey}: ${summary}`,
      content: `Jira-ID: ${issueKey}\n\n${description}`,
      users_id_recipient: userId,
    })

    if (result) {
      log(`‚úÖ Created GLPI ticket for Jira issue ${issueKey}`)
    }
  }
}

export async function syncGLPIToJira() {
  const tickets = await getGLPITickets()
  log(`Fetched ${tickets.length} tickets from GLPI`)

  const existingIssues = await getJiraIssues()

  // –°–æ–±–∏—Ä–∞–µ–º GLPI-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ Jira
  const existingGLPIIds = new Set()
  for (const issue of existingIssues) {
    const match = issue.fields.description?.match(/GLPI-ID: (\d+)/)
    if (match) {
      existingGLPIIds.add(parseInt(match[1]))
    }
  }

  for (const ticket of tickets) {
    const ticketId = ticket.id
    const summary =
      (ticket.name && ticket.name.trim()) ||
      (ticket.title && ticket.title.trim()) ||
      `GLPI Ticket ${ticketId}`
    const description = ticket.content || "No description"

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ Jira
    if (existingGLPIIds.has(ticketId)) {
      log(`üü° Jira issue already exists for GLPI ticket ${ticketId}, skipping`)
      continue
    }

    const issuePayload = {
      fields: {
        project: { key: config.jira.projectKey },
        summary: `GLPI-${ticketId}: ${summary}`,
        description: `GLPI-ID: ${ticketId}\n\n${description}`,
        issuetype: { name: "Task" },
      },
    }

    try {
      await axios.post(
        `${config.jira.baseUrl}/rest/api/2/issue`,
        issuePayload,
        { headers: jiraHeaders }
      )

      log(`‚úÖ Created Jira issue for GLPI ticket ${ticketId}`)
    } catch (err) {
      log(
        `‚ùå Failed to create Jira issue for GLPI ticket ${ticketId}: ${
          err.response?.status
        } ‚Äì ${JSON.stringify(err.response?.data) || err.message}`,
        "error"
      )
    }
  }
}

export async function syncDeletedItems() {
  const jiraIssues = await getJiraIssues()
  const glpiTickets = await getGLPITickets()

  const jiraMap = new Map(jiraIssues.map((issue) => [issue.key, issue]))
  const glpiMap = new Map(glpiTickets.map((ticket) => [ticket.id, ticket]))

  for (const ticket of glpiTickets) {
    const jiraKeyMatch = ticket.content?.match(/Jira-ID: ([A-Z]+-\d+)/)
    if (jiraKeyMatch) {
      const jiraKey = jiraKeyMatch[1]
      if (!jiraMap.has(jiraKey)) {
        log(
          `üóëÔ∏è Jira issue ${jiraKey} was deleted, deleting GLPI ticket ${ticket.id}`
        )
        await deleteGLPITicket(ticket.id)
      }
    }
  }

  for (const issue of jiraIssues) {
    const glpiIdMatch = issue.fields.description?.match(/GLPI-ID: (\d+)/)
    if (glpiIdMatch) {
      const glpiId = parseInt(glpiIdMatch[1])
      if (!glpiMap.has(glpiId)) {
        log(
          `üóëÔ∏è GLPI ticket ${glpiId} was deleted, deleting Jira issue ${issue.key}`
        )
        await deleteJiraIssue(issue.key)
      }
    }
  }
}

[src/utils/mapping.js]
export const userMap = {
  "glpi": 2,
  "post-only": 3,
  "tech": 4,
  "normal": 5,
  "glpi-system": 6,
};

