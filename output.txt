[src/config/index.js]
import dotenv from "dotenv"
dotenv.config()

export const config = {
  jira: {
    baseUrl: process.env.JIRA_BASE_URL,
    email: process.env.JIRA_EMAIL,
    token: process.env.JIRA_API_TOKEN,
  },
  glpi: {
    baseUrl: process.env.GLPI_BASE_URL,
    userToken: process.env.GLPI_USER_TOKEN,
    appToken: process.env.GLPI_APP_TOKEN,
  },
  statusMapping: {
    jiraToGlpi: {
      "To Do": 1,
      "In Progress": 2,
      Done: 5,
    },
    glpiToJira: {
      1: "To Do",
      2: "In Progress",
      5: "Done",
    },
  },
  dryRun: false,
}

[src/glpi.js]
import axios from "axios"
import { config } from "../config/index.js"
import { log } from "./logger.js"

let sessionToken = null

export async function initGLPISession() {
  try {
    const response = await axios.get(`${config.glpi.baseUrl}/initSession`, {
      headers: {
        Authorization: `user_token ${config.glpi.userToken}`,
        "App-Token": config.glpi.appToken,
      },
    })
    sessionToken = response.data.session_token
    log("GLPI session started")
  } catch (error) {
    log(`GLPI session error: ${error.message}`, "error")
  }
}

export async function killGLPISession() {
  if (!sessionToken) return
  await axios.get(`${config.glpi.baseUrl}/killSession`, {
    headers: {
      "Session-Token": sessionToken,
      "App-Token": config.glpi.appToken,
    },
  })
  log("GLPI session ended")
  sessionToken = null
}

export async function getGLPITickets() {
  try {
    const response = await axios.get(`${config.glpi.baseUrl}/Ticket/`, {
      headers: {
        "Session-Token": sessionToken,
        "App-Token": config.glpi.appToken,
      },
    })
    return response.data
  } catch (error) {
    log(`GLPI get tickets error: ${error.message}`, "error")
    return []
  }
}

[src/index.js]
import { initGLPISession, killGLPISession } from "./glpi.js"
import { syncJiraToGLPI, syncGLPIToJira } from "./sync.js"
import { log } from "./logger.js"

async function main() {
  const mode = process.argv[2] || "both"
  await initGLPISession()

  try {
    if (mode === "jira2glpi" || mode === "both") await syncJiraToGLPI()
    if (mode === "glpi2jira" || mode === "both") await syncGLPIToJira()
  } catch (error) {
    log(`Main error: ${error.message}`, "error")
  } finally {
    await killGLPISession()
  }
}

main()

[src/jira.js]
import axios from "axios"
import { config } from "../config/index.js"
import { log } from "./logger.js"

const authHeader = {
  Authorization: `Basic ${Buffer.from(
    `${config.jira.email}:${config.jira.token}`
  ).toString("base64")}`,
}

export async function getJiraIssues() {
  try {
    const response = await axios.get(
      `${config.jira.baseUrl}/rest/api/3/search?jql=project=TEST`,
      { headers: authHeader }
    )
    return response.data.issues || []
  } catch (error) {
    log(`Jira get issues error: ${error.message}`, "error")
    return []
  }
}

[src/logger.js]
export function log(message, level = "info") {
  const timestamp = new Date().toISOString()
  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}]: ${message}`
  console.log(formattedMessage)
}

[src/scripts/generateMapping.js]
import axios from "axios"
import fs from "fs"
import dotenv from "dotenv"
dotenv.config()

const { GLPI_API_URL, GLPI_APP_TOKEN, GLPI_USER_TOKEN } = process.env

const mappingFilePath = "./src/utils/mapping.js"

async function getSessionToken() {
  const response = await axios.get(`${GLPI_API_URL}/initSession`, {
    headers: {
      "App-Token": GLPI_APP_TOKEN,
      Authorization: `user_token ${GLPI_USER_TOKEN}`,
    },
  })
  return response.data.session_token
}

async function getUsers(sessionToken) {
  const response = await axios.get(`${GLPI_API_URL}/User`, {
    headers: {
      "Session-Token": sessionToken,
      "App-Token": GLPI_APP_TOKEN,
    },
    params: {
      range: "0-999",
    },
  })

  return response.data
}

function buildUserMap(users) {
  const map = {}
  users.forEach((user) => {
    if (user.name) {
      map[user.name] = user.id
    }
  })
  return map
}

function saveMappingToFile(map) {
  const entries = Object.entries(map)
    .map(([name, id]) => `  "${name}": ${id},`)
    .join("\n")

  const content = `export const userMap = {\n${entries}\n};\n`

  fs.writeFileSync(mappingFilePath, content, "utf8")
  console.log(`mapping.js updated with ${Object.keys(map).length} users.`)
}

async function main() {
  try {
    const token = await getSessionToken()
    const users = await getUsers(token)
    const userMap = buildUserMap(users)
    saveMappingToFile(userMap)
  } catch (err) {
    console.error("Error:", err.message)
  }
}

main()

[src/sync.js]
import { getJiraIssues } from "./jira.js"
import { getGLPITickets } from "./glpi.js"
import { config } from "../config/index.js"
import { log } from "./logger.js"
import { userMap } from "./utils/mapping.js"
import axios from "axios"

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Jira API
const jiraHeaders = {
  Authorization: `Basic ${Buffer.from(
    `${config.jira.email}:${config.jira.token}`
  ).toString("base64")}`,
  "Content-Type": "application/json",
}

export async function syncJiraToGLPI() {
  const issues = await getJiraIssues()
  log(`Fetched ${issues.length} issues from Jira`)

  // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å GLPI –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤
  for (const issue of issues) {
    const summary = issue.fields.summary
    const description =
      issue.fields.description?.content?.[0]?.content?.[0]?.text ||
      "No description"

    // log –∏–ª–∏ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ GLPI
    log(`üìù Would sync Jira issue: ${summary}`)
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ GLPI
  }
}

export async function syncGLPIToJira() {
  const tickets = await getGLPITickets()
  log(`Fetched ${tickets.length} tickets from GLPI`)

  const existingIssues = await getJiraIssues()
  const existingSummaries = new Set(existingIssues.map((i) => i.fields.summary))

  for (const ticket of tickets) {
    const summary = ticket.name || `GLPI Ticket ${ticket.id}`
    const description = ticket.content || `Ticket ID: ${ticket.id}`
    const reporterId = ticket.users_id_recipient
    const reporterEmail = Object.keys(userMap).find(
      (key) => userMap[key] === reporterId
    )

    if (existingSummaries.has(summary)) {
      log(`üü° Jira issue already exists for GLPI ticket "${summary}", skipping`)
      continue
    }

    const issuePayload = {
      fields: {
        project: { key: process.env.JIRA_KEY_PROJECT },
        summary: summary,
        description: description,
        issuetype: { name: "Task" },
        ...(reporterEmail ? { reporter: { name: reporterEmail } } : {}),
      },
    }

    try {
      await axios.post(
        `${config.jira.baseUrl}/rest/api/3/issue`,
        issuePayload,
        {
          headers: jiraHeaders,
        }
      )

      log(`‚úÖ Created Jira issue for GLPI ticket ${ticket.id}`)
    } catch (err) {
      log(
        `‚ùå Failed to create Jira issue for GLPI ticket ${ticket.id}: ${err.message}`,
        "error"
      )
    }
  }
}

[src/utils/mapping.js]
export const userMap = {
  "glpi": 2,
  "post-only": 3,
  "tech": 4,
  "normal": 5,
  "glpi-system": 6,
};

